{"ast":null,"code":"var _class;\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.baseUri = 'http://localhost:4000/api';\n    this.headers = new HttpHeaders().set('Content-Type', 'application/json');\n  }\n  // Create\n  createEmployee(data) {\n    let url = `${this.baseUri}/create`;\n    return this.http.post(url, data).pipe(catchError(this.errorMgmt));\n  }\n  // Get all employees\n  getEmployees() {\n    return this.http.get(`${this.baseUri}`);\n  }\n  // Get employee\n  getEmployee(id) {\n    let url = `${this.baseUri}/read/${id}`;\n    return this.http.get(url, {\n      headers: this.headers\n    }).pipe(map(res => {\n      return res || {};\n    }), catchError(this.errorMgmt));\n  }\n  // Update employee\n  updateEmployee(id, data) {\n    let url = `${this.baseUri}/update/${id}`;\n    return this.http.put(url, data, {\n      headers: this.headers\n    }).pipe(catchError(this.errorMgmt));\n  }\n  // Delete employee\n  deleteEmployee(id) {\n    let url = `${this.baseUri}/delete/${id}`;\n    return this.http.delete(url, {\n      headers: this.headers\n    }).pipe(catchError(this.errorMgmt));\n  }\n  // Error handling\n  errorMgmt(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n}\n_class = ApiService;\n_class.ɵfac = function ApiService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["throwError","catchError","map","HttpHeaders","ApiService","constructor","http","baseUri","headers","set","createEmployee","data","url","post","pipe","errorMgmt","getEmployees","get","getEmployee","id","res","updateEmployee","put","deleteEmployee","delete","error","errorMessage","ErrorEvent","message","status","console","log","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\angular-project\\mean-stack-crud-app\\src\\app\\service\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpErrorResponse,\n} from '@angular/common/http';\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiService {\n  baseUri: string = 'http://localhost:4000/api';\n  headers = new HttpHeaders().set('Content-Type', 'application/json');\n  constructor(private http: HttpClient) {}\n  // Create\n  createEmployee(data): Observable<any> {\n    let url = `${this.baseUri}/create`;\n    return this.http.post(url, data).pipe(catchError(this.errorMgmt));\n  }\n  // Get all employees\n  getEmployees() {\n    return this.http.get(`${this.baseUri}`);\n  }\n  // Get employee\n  getEmployee(id): Observable<any> {\n    let url = `${this.baseUri}/read/${id}`;\n    return this.http.get(url, { headers: this.headers }).pipe(\n      map((res: Response) => {\n        return res || {};\n      }),\n      catchError(this.errorMgmt)\n    );\n  }\n  // Update employee\n  updateEmployee(id, data): Observable<any> {\n    let url = `${this.baseUri}/update/${id}`;\n    return this.http\n      .put(url, data, { headers: this.headers })\n      .pipe(catchError(this.errorMgmt));\n  }\n  // Delete employee\n  deleteEmployee(id): Observable<any> {\n    let url = `${this.baseUri}/delete/${id}`;\n    return this.http\n      .delete(url, { headers: this.headers })\n      .pipe(catchError(this.errorMgmt));\n  }\n  // Error handling\n  errorMgmt(error: HttpErrorResponse) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      // Get client-side error\n      errorMessage = error.error.message;\n    } else {\n      // Get server-side error\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(() => {\n      return errorMessage;\n    });\n  }\n}"],"mappings":";AACA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAEEC,WAAW,QAEN,sBAAsB;;;AAI7B,OAAM,MAAOC,UAAU;EAGrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,OAAO,GAAW,2BAA2B;IAC7C,KAAAC,OAAO,GAAG,IAAIL,WAAW,EAAE,CAACM,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;EAC5B;EACvC;EACAC,cAAcA,CAACC,IAAI;IACjB,IAAIC,GAAG,GAAG,GAAG,IAAI,CAACL,OAAO,SAAS;IAClC,OAAO,IAAI,CAACD,IAAI,CAACO,IAAI,CAACD,GAAG,EAAED,IAAI,CAAC,CAACG,IAAI,CAACb,UAAU,CAAC,IAAI,CAACc,SAAS,CAAC,CAAC;EACnE;EACA;EACAC,YAAYA,CAAA;IACV,OAAO,IAAI,CAACV,IAAI,CAACW,GAAG,CAAC,GAAG,IAAI,CAACV,OAAO,EAAE,CAAC;EACzC;EACA;EACAW,WAAWA,CAACC,EAAE;IACZ,IAAIP,GAAG,GAAG,GAAG,IAAI,CAACL,OAAO,SAASY,EAAE,EAAE;IACtC,OAAO,IAAI,CAACb,IAAI,CAACW,GAAG,CAACL,GAAG,EAAE;MAAEJ,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC,CAACM,IAAI,CACvDZ,GAAG,CAAEkB,GAAa,IAAI;MACpB,OAAOA,GAAG,IAAI,EAAE;IAClB,CAAC,CAAC,EACFnB,UAAU,CAAC,IAAI,CAACc,SAAS,CAAC,CAC3B;EACH;EACA;EACAM,cAAcA,CAACF,EAAE,EAAER,IAAI;IACrB,IAAIC,GAAG,GAAG,GAAG,IAAI,CAACL,OAAO,WAAWY,EAAE,EAAE;IACxC,OAAO,IAAI,CAACb,IAAI,CACbgB,GAAG,CAACV,GAAG,EAAED,IAAI,EAAE;MAAEH,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC,CACzCM,IAAI,CAACb,UAAU,CAAC,IAAI,CAACc,SAAS,CAAC,CAAC;EACrC;EACA;EACAQ,cAAcA,CAACJ,EAAE;IACf,IAAIP,GAAG,GAAG,GAAG,IAAI,CAACL,OAAO,WAAWY,EAAE,EAAE;IACxC,OAAO,IAAI,CAACb,IAAI,CACbkB,MAAM,CAACZ,GAAG,EAAE;MAAEJ,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC,CACtCM,IAAI,CAACb,UAAU,CAAC,IAAI,CAACc,SAAS,CAAC,CAAC;EACrC;EACA;EACAA,SAASA,CAACU,KAAwB;IAChC,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrC;MACAD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACL;MACAF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEzEE,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;IACzB,OAAO1B,UAAU,CAAC,MAAK;MACrB,OAAO0B,YAAY;IACrB,CAAC,CAAC;EACJ;;SAnDWtB,UAAU;;mBAAVA,MAAU,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAV/B,MAAU;EAAAgC,OAAA,EAAVhC,MAAU,CAAAiC,IAAA;EAAAC,UAAA,EAFT;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}